//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;

namespace Redecard.Portal.Aberto.WebParts.RedeCardEmUmClique {
    /// <summary>
    /// 
    /// </summary>
    [GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [SerializableAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true)]
    [XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class RedecardEmUmCliqueContainer {
        private RedecardEmUmCliqueItem[] itemsField;

        /// <summary>
        /// 
        /// </summary>
        [XmlElementAttribute("url", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public RedecardEmUmCliqueItem[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }

        /// <summary>
        /// Deserializa o XML em um objeto do tipo &quot;RedecardEmUmCliqueContainer&quot;
        /// </summary>
        /// <returns></returns>
        public static RedecardEmUmCliqueContainer Deserialize(string xmlSource) {
            XmlSerializer serializer = new XmlSerializer(typeof(RedecardEmUmCliqueContainer));
            StringReader reader = new StringReader(xmlSource);
            RedecardEmUmCliqueContainer oContainer = serializer.Deserialize(reader) as RedecardEmUmCliqueContainer;
            return oContainer;
        }

        /// <summary>
        /// Serializar o objeto em uma string de dados
        /// </summary>
        /// <returns></returns>
        public string Serialize() {
            XmlSerializer serializer = new XmlSerializer(typeof(RedecardEmUmCliqueContainer));
            StringBuilder sb = new StringBuilder();
            StringWriter wr = new StringWriter(sb, CultureInfo.InvariantCulture);
            serializer.Serialize(wr, this);
            string sDados = wr.ToString();
            // verificar se existe uma definição de utf-16, isso era um bug da
            // versão antiga
            sDados = sDados.Replace("utf-16", "utf-8");
            return sDados;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    [GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [SerializableAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true)]
    public partial class RedecardEmUmCliqueItem : IComparable {
        private string tituloField;

        private string enderecoField;

        private string idField;

        /// <summary>
        /// 
        /// </summary>
        [XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Titulo {
            get {
                return this.tituloField;
            }
            set {
                this.tituloField = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Endereco {
            get {
                return this.enderecoField;
            }
            set {
                this.enderecoField = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [XmlAttributeAttribute()]
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }

        /// <summary>
        /// Utilizado na ordenação de conteúdo, verifica os títulos dos links
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public int CompareTo(object obj) {
            RedecardEmUmCliqueItem comparerObject = obj as RedecardEmUmCliqueItem;
            // verificar se não é nulo
            if (!object.ReferenceEquals(comparerObject, null)) {
                return this.Titulo.CompareTo(comparerObject.Titulo);
            }
            return 0;
        }
    }
}